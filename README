Проект рассчитан на выкладку в корень сайта http://localhost/
При этом есть три различных варианта настроек проекта:
http://localhost/
http://localhost/brand1
http://localhost/brand2

Тестовое задание:
1. Доработайте проект так, чтобы класс Config не допускал возможности создания нескольких экземпляров;
2. Доработайте проект так, чтобы подписка в каждом из различных вариантов настроек была независима;
3. При попытке подписаться в brand2 тестеры получают ошибку - бесконечные редиректы, исправьте ошибку;
4. Доработайте проект так, чтобы исключить подобные (п.3) ошибки при добавлении новых вариантов настроек;
5. Доработайте проект так, чтобы запрос на несуществующую ссылку не приводил к PHP Fatal error;
6. Что в целом можете сказать про код, который пришлось править? (Напишите пару предложений в ответ);
    Ответ:
    Построенная вокруг MVC и Singleton система. Определенно требует рефакторинга (код и архитектура) по ряду причин:
    - Паттерн Singleton считается анти-паттерном и для лучшей тестируемости и сопровождения кода следует использовать внедрение зависимости (Dependency Injection);
    - Нарушен ряд основных принципов эффективной системной архитектуры:
        - нарушен low coupling - присутсвтует сильная зависимость классов от других классов, поскольку многие обьекты построены по паттерну Singleton, и нет возможности использовать конструктор для связи по интерфейсу;
        - нарушен high cohesion - многие классы решают однвременно множество задач (напр. работа напрямую с сессиями внутри контроллера), а должны решать только определенные;
        - нет реализации полиморфизма - возможности связывать обьекты через интерфейс с различными реализациями других обьектов (напр. использовать в классе через интерфейс различные реализации хранилища сессий, логгеров, шаблонизаторов и т.д.);
    - Я бы не создавал "велосипед", а использовал существующие архитектурные решения (фреймворки), в зависимости от полных требований к проекту (Laravel, Yii, Symphony и т.д.).
7. Пришлите в ответ архив с git-репозиторием, в котором каждый пункт тестового задания выполнен отдельным коммитом.

P.S. Если в процессе анализа кода проекта или его доработок встретятся какие то огрехи, явно требующие исправления - исправьте отдельным коммитом.
